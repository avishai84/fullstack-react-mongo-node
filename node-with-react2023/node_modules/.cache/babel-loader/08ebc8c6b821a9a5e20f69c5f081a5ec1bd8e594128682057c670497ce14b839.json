{"ast":null,"code":"var _jsxFileName = \"/Users/Avishai/Developer/fullstack/node-with-react2023/src/components/Animals.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport useFetch from '../hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Animals = () => {\n  _s();\n  const {\n    responseData,\n    error,\n    isLoading\n  } = useFetch('http://localhost:3002/api/data');\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 14\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this);\n  }\n  const animalList = responseData === null || responseData === void 0 ? void 0 : responseData.data.map(animal => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: \"0 0 33.33%\",\n        padding: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        loading: \"lazy\",\n        src: animal.src,\n        alt: animal.name,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: animal.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, animal.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  });\n  // create a flex grid of 3x3 with the albumList\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    children: animalList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n};\n_s(Animals, \"5M+gflR0HUMC21+P0RnDerl6VbM=\", false, function () {\n  return [useFetch];\n});\n_c = Animals;\nexport default Animals;\nvar _c;\n$RefreshReg$(_c, \"Animals\");","map":{"version":3,"names":["React","useFetch","jsxDEV","_jsxDEV","Animals","_s","responseData","error","isLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","animalList","data","map","animal","style","flex","padding","loading","src","alt","name","width","height","location","display","flexWrap","_c","$RefreshReg$"],"sources":["/Users/Avishai/Developer/fullstack/node-with-react2023/src/components/Animals.tsx"],"sourcesContent":["import React from 'react'\nimport useFetch from '../hooks/useFetch';\n\ntype Animals = {\n    name:string;\n    src:string;\n    location:string;\n}\n  \ntype AnimalsArray = {data:Array<Animals>};    \n\nconst Animals = ():JSX.Element => {\n\n    const {responseData, error, isLoading} = useFetch<AnimalsArray>('http://localhost:3002/api/data');\n\n    \n    if (isLoading) {\n      return <div>Loading...</div>;\n    }\n    if (error) {\n      return <div>Error: {error as string}</div>;\n    }\n\n    const animalList = responseData?.data.map((animal) => {\n        return (\n            <div key={animal.name} style={{ flex: \"0 0 33.33%\", padding: \"10px\" }}>\n            {/* Replace the content below with your desired album rendering */}\n            <img loading=\"lazy\" src={animal.src} alt={animal.name} style={{ width: \"100%\", height: \"auto\" }} />\n            <p>{animal.location}</p>\n          </div>\n        );\n    })\n    // create a flex grid of 3x3 with the albumList\n\n  return(<div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n    {animalList}\n  </div>);\n};\n\nexport default Animals;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzC,MAAMC,OAAO,GAAGA,CAAA,KAAkB;EAAAC,EAAA;EAE9B,MAAM;IAACC,YAAY;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGP,QAAQ,CAAe,gCAAgC,CAAC;EAGjG,IAAIO,SAAS,EAAE;IACb,oBAAOL,OAAA;MAAAM,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EACA,IAAIN,KAAK,EAAE;IACT,oBAAOJ,OAAA;MAAAM,QAAA,GAAK,SAAO,EAACF,KAAK;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EAC5C;EAEA,MAAMC,UAAU,GAAGR,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAES,IAAI,CAACC,GAAG,CAAEC,MAAM,IAAK;IAClD,oBACId,OAAA;MAAuBe,KAAK,EAAE;QAAEC,IAAI,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAX,QAAA,gBAEtEN,OAAA;QAAKkB,OAAO,EAAC,MAAM;QAACC,GAAG,EAAEL,MAAM,CAACK,GAAI;QAACC,GAAG,EAAEN,MAAM,CAACO,IAAK;QAACN,KAAK,EAAE;UAAEO,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnGV,OAAA;QAAAM,QAAA,EAAIQ,MAAM,CAACU;MAAQ;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAHdI,MAAM,CAACO,IAAI;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIlB,CAAC;EAEZ,CAAC,CAAC;EACF;;EAEF,oBAAOV,OAAA;IAAKe,KAAK,EAAE;MAAEU,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAO,CAAE;IAAApB,QAAA,EACtDK;EAAU;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AACR,CAAC;AAACR,EAAA,CA1BID,OAAO;EAAA,QAEgCH,QAAQ;AAAA;AAAA6B,EAAA,GAF/C1B,OAAO;AA4Bb,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}