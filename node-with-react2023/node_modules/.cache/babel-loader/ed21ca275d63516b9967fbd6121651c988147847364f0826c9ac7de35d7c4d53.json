{"ast":null,"code":"var _jsxFileName = \"/Users/Avishai/Developer/fullstack/node-with-react2023/src/components/Albums.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport useFetch from '../hooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Albums = () => {\n  _s();\n  const {\n    responseData,\n    error,\n    isLoading\n  } = useFetch('http://localhost:3002/api/albums');\n  const {\n    data\n  } = responseData;\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }, this);\n  }\n\n  // const albumList = data.map((album) => {\n  //     return (\n  //         <div key={album.id} style={{ flex: \"0 0 33.33%\", padding: \"10px\" }}>\n  //         {/* Replace the content below with your desired album rendering */}\n  //         <img src={album.thumbnailUrl} alt={album.title} style={{ width: \"100%\", height: \"auto\" }} />\n  //         <p>{album.title}</p>\n  //       </div>\n  //     );\n  // })\n  // create a flex grid of 3x3 with the albumList\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(Albums, \"5M+gflR0HUMC21+P0RnDerl6VbM=\", false, function () {\n  return [useFetch];\n});\n_c = Albums;\nexport default Albums;\nvar _c;\n$RefreshReg$(_c, \"Albums\");","map":{"version":3,"names":["React","useFetch","jsxDEV","_jsxDEV","Albums","_s","responseData","error","isLoading","data","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","_c","$RefreshReg$"],"sources":["/Users/Avishai/Developer/fullstack/node-with-react2023/src/components/Albums.tsx"],"sourcesContent":["import React from 'react'\nimport useFetch from '../hooks/useFetch';\n\ntype DataFromFetch = {\n    albumId: number;\n    id: number;\n    thumbnailUrl:string;\n    title: string;\n    url: string;\n    };\n\n  \ntype AlbumArray = {data:Array<DataFromFetch>};    \n\nconst Albums = ():JSX.Element => {\n\n    const {responseData, error, isLoading} = useFetch<AlbumArray>('http://localhost:3002/api/albums');\n    const {data} = responseData as AlbumArray;\n \n    if (isLoading) {\n      return <div>Loading...</div>;\n    }\n    if (error) {\n      return <div>Error: {error as string}</div>;\n    }\n\n    // const albumList = data.map((album) => {\n    //     return (\n    //         <div key={album.id} style={{ flex: \"0 0 33.33%\", padding: \"10px\" }}>\n    //         {/* Replace the content below with your desired album rendering */}\n    //         <img src={album.thumbnailUrl} alt={album.title} style={{ width: \"100%\", height: \"auto\" }} />\n    //         <p>{album.title}</p>\n    //       </div>\n    //     );\n    // })\n    // create a flex grid of 3x3 with the albumList\n\n  return(<div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n    {/* {albumList} */}\n  </div>);\n};\n\nexport default Albums;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAazC,MAAMC,MAAM,GAAGA,CAAA,KAAkB;EAAAC,EAAA;EAE7B,MAAM;IAACC,YAAY;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGP,QAAQ,CAAa,kCAAkC,CAAC;EACjG,MAAM;IAACQ;EAAI,CAAC,GAAGH,YAA0B;EAEzC,IAAIE,SAAS,EAAE;IACb,oBAAOL,OAAA;MAAAO,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EACA,IAAIP,KAAK,EAAE;IACT,oBAAOJ,OAAA;MAAAO,QAAA,GAAK,SAAO,EAACH,KAAK;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EAC5C;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,oBAAOX,OAAA;IAAKY,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAO;EAAE;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpD,CAAC;AACR,CAAC;AAACT,EAAA,CA1BID,MAAM;EAAA,QAEiCH,QAAQ;AAAA;AAAAiB,EAAA,GAF/Cd,MAAM;AA4BZ,eAAeA,MAAM;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}