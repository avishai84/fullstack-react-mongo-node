{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n\n// we need to accept argument as url for the fetch\n// we need to return the data, isLoasding, error\nasync function fetchData(url) {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\nexport default function useFetch(url) {\n  _s();\n  const [responseData, setResponseData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDataAndSetState = async () => {\n    try {\n      setIsLoading(true);\n      const data = await fetchData(url);\n      setResponseData(data);\n      setError(null);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchDataAndSetState();\n  }, [url]);\n\n  // Function to refetch the data\n  const refetchData = () => {\n    fetchDataAndSetState();\n  };\n  return {\n    responseData,\n    isLoading,\n    error,\n    refetchData\n  };\n}\n_s(useFetch, \"GmtL1pe2/yPrc+oNKaMRNivIT1U=\");","map":{"version":3,"names":["useEffect","useState","fetchData","url","response","fetch","data","json","useFetch","_s","responseData","setResponseData","isLoading","setIsLoading","error","setError","fetchDataAndSetState","refetchData"],"sources":["/Users/Avishai/Developer/fullstack/node-with-react2023/src/hooks/useFetch.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\n\n// we need to accept argument as url for the fetch\n// we need to return the data, isLoasding, error\n\ntype UseFetchProps<T> = {\n    responseData: T | null;\n    isLoading: boolean,\n    error: undefined | null | string | unknown;\n    refetchData: () => void;\n}\n\nasync function fetchData<T>(url: string): Promise<T> {\n    const response = await fetch(url);\n    const data:Promise<T> = await response.json();\n    return data;\n  }\n\nexport default function useFetch<T>(url:string):UseFetchProps<T> {\n    const [responseData, setResponseData] = useState<T | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<undefined | null | string | unknown>(null);\n    const fetchDataAndSetState = async () => {\n        try {\n          setIsLoading(true);\n          const data = await fetchData<T>(url);\n          setResponseData(data);\n          setError(null);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n    useEffect(() => {\n    fetchDataAndSetState();\n  }, [url]);\n\n  // Function to refetch the data\n  const refetchData = () => {\n    fetchDataAndSetState();\n  };\n\n  return { responseData, isLoading, error, refetchData };\n}\n\n"],"mappings":";AAAA,SAAeA,SAAS,EAAEC,QAAQ,QAAO,OAAO;;AAEhD;AACA;AASA,eAAeC,SAASA,CAAIC,GAAW,EAAc;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,MAAMG,IAAe,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC7C,OAAOD,IAAI;AACb;AAEF,eAAe,SAASE,QAAQA,CAAIL,GAAU,EAAmB;EAAAM,EAAA;EAC7D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAW,IAAI,CAAC;EAChE,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAU,IAAI,CAAC;EACzD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAsC,IAAI,CAAC;EAC7E,MAAMe,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACFH,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMP,IAAI,GAAG,MAAMJ,SAAS,CAAIC,GAAG,CAAC;MACpCQ,eAAe,CAACL,IAAI,CAAC;MACrBS,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAAC;IACjB,CAAC,SAAS;MACRD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEHb,SAAS,CAAC,MAAM;IAChBgB,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACb,GAAG,CAAC,CAAC;;EAET;EACA,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxBD,oBAAoB,CAAC,CAAC;EACxB,CAAC;EAED,OAAO;IAAEN,YAAY;IAAEE,SAAS;IAAEE,KAAK;IAAEG;EAAY,CAAC;AACxD;AAACR,EAAA,CA3BuBD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}